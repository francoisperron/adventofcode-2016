import {describe, it, beforeEach} from "mocha";
import {expect} from 'chai';
import {DecrytpCode, keypad, complexKeypad} from "./bathroom_code";

const input = [
    "UULLULLUULLLURDLDUURRDRRLDURDULLRURDUDULLLUULURURLRDRRRRULDRUULLLLUUDURDULDRRDRUDLRRLDLUDLDDRURURUURRRDDDLLRUDURDULUULLRRULLRULDUDRDRLDLURURUDDUDLURUDUDURLURURRURLUDDRURRDLUURLLRURRDUDLULULUDULDLLRRRDLRDLDUDRDDDRRUURRRRRUURRDRRDLURDRRURDLLUULULLRURDLDDDRRLLRRUURULURUUDDLRRUDDRURUUDLRLRDLRURRRDULLDLRUDDUULRDULURUURDULUDLLRRLDDLRDLRUDRLDDRLRRRDURDULLRRRDRRLUURURDRRDRRLDLUDURURLDUURDRUDRDDRLDRRLDLURURULLUURUDUUDLRLL",
    "LLLULLULDDULRLLURLLLRUUDDLRUULRLULLDLLRRDRLRLRLLDRUUURULDRDDLUDLLDUDULLLRLULLLRULDRDRUDLLRLRLLUDULRRRLDRUULDDULLDULULLUDUDLDRDURDLDLLDUDRRRDLUURRUURULLURLDURLRRLLDDUUULDRLUUDUDLURLULUDURRDRLLDDDDDRRULLRLDULULDDRUURRDLUDDDUDURDDRDRULULLLLUURDURUUUULUDLRURRULRDDRURURLLRLUUDUUURDLLDDLUDRLLLUDLLLLULRLURDRRRDUUDLLDLDDDURRDDRURUURDDRURRLDDDURDLLUURUUULRLUURRUDRLLDLURDUDRLULDLRLULULUDDLRDUDRUDLUULUULDURDRRRRLRULLUDRDDRDLDUDRDRRLDLLLLUDDLRULDLLDDUULDDRRULRRUURUDRDURLLLDDUUDRUUDLULLDR",
    "UDUUULLDDDDLUDLDULRLRDLULLDDRULDURRLURRUDLRRUDURRDUDRRRUULRLLRLUDLDRRDUURDDRDRDUUUDUDLDLLRRLUURLUUUDDDUURLULURRLURRRDRDURURUDRLRUURUDRUDDDRDRDLDRDURDLDRRDUUDLLURLDDURRRLULDRDRLLRLLLRURLDURDRLDRUURRLDLDRLDDDRLDLRLDURURLLLLDDRDUDLRULULLRDDLLUDRDRRLUUULDRLDURURDUDURLLDRRDUULDUUDLLDDRUUULRRULDDUDRDRLRULUUDUURULLDLLURLRRLDDDLLDRRDDRLDDLURRUDURULUDLLLDUDDLDLDLRUDUDRDUDDLDDLDULURDDUDRRUUURLDUURULLRLULUURLLLLDUUDURUUDUULULDRULRLRDULDLLURDLRUUUDDURLLLLDUDRLUUDUDRRURURRDRDDRULDLRLURDLLRRDRUUUURLDRURDUUDLDURUDDLRDDDDURRLRLUDRRDDURDDRLDDLLRR",
    "ULDRUDURUDULLUDUDURLDLLRRULRRULRUDLULLLDRULLDURUULDDURDUUDLRDRUDUDDLDRDLUULRRDLRUULULUUUDUUDDRDRLLULLRRDLRRLUDRLULLUUUUURRDURLLRURRULLLRLURRULRDUURRLDDRRDRLULDDRRDRLULLRDLRRURUDURULRLUDRUDLUDDDUDUDDUDLLRDLLDRURULUDRLRRULRDDDDDRLDLRRLUUDLUURRDURRDLDLDUDRLULLULRLDRDUDLRULLULLRLDDRURLLLRLDDDLLLRURDDDLLUDLDLRLUULLLRULDRRDUDLRRDDULRLLDUURLLLLLDRULDRLLLUURDURRULURLDDLRRUDULUURRLULRDRDDLULULRRURLDLRRRUDURURDURDULURULLRLDD",
    "DURLRRRDRULDLULUDULUURURRLULUDLURURDDURULLRRUUDLRURLDLRUDULDLLRRULLLLRRLRUULDLDLLRDUDLLRLULRLLUUULULRDLDLRRURLUDDRRLUUDDRRUDDRRURLRRULLDDULLLURRULUDLRRRURRULRLLLRULLRRURDRLURULLDULRLLLULLRLRLLLDRRRRDDDDDDULUUDUDULRURDRUDRLUULURDURLURRDRRRRDRRLLLLUDLRRDURURLLULUDDLRLRLRRUURLLURLDUULLRRDURRULRULURLLLRLUURRULLLURDDDRURDUDDULLRULUUUDDRURUUDUURURRDRURDUDRLLRRULURUDLDURLDLRRRRLLUURRLULDDDUUUURUULDLDRLDUDULDRRULDRDULURRUURDU"
];

describe('Day 2', () => {
    let decrypt = {};

    describe('The code on the numeric keypad', () => {
        beforeEach('', () =>{
            decrypt = new DecrytpCode(keypad);
        });

        describe('The code on multiple lines', () => {
            it('is 1985 for the given example', () => {
                expect(decrypt.completeCodeOf(["ULL", "RRDDD", "LURDL", "UUUUD"])).to.equal('1985');
            });

            it('day two input', () => {
                expect(decrypt.completeCodeOf(input)).to.equal('45973');
            });
        });

        describe('The code on one line', () => {
            it("is 5 when there's no instructions", () => {
                expect(decrypt.codeOf('5', "")).to.equal('5');
            });

            it("is 2 when we move UP", () => {
                expect(decrypt.codeOf('5', "U")).to.equal('2');
            });

            it("is 1 when we move ULL", () => {
                expect(decrypt.codeOf('5', "ULL")).to.equal('1');
            });
        });
    });

    describe('Numberic keypad', () => {
        it('Can move up', () => {
            expect(keypad['5']['U']).to.equal('2');
        });

        it('Can move down', () => {
            expect(keypad['5']['D']).to.equal('8');
        });

        it('Can move left', () => {
            expect(keypad['5']['L']).to.equal('4');
        });

        it('Can move right', () => {
            expect(keypad['5']['R']).to.equal('6');
        });

        it('does not move pass upper and lower bounds', () => {
            expect(keypad['1']['U']).to.equal('1');
            expect(keypad['9']['R']).to.equal('9');
        });

        it('does not move pass right and left bounds', () => {
            expect(keypad['3']['R']).to.equal('3');
            expect(keypad['4']['L']).to.equal('4');
        });
    });

    describe('The code on the complexKeypad', () => {
        beforeEach('', () =>{
            decrypt = new DecrytpCode(complexKeypad);
        });

        it('is 5DB3 for the given example', () => {
            expect(decrypt.completeCodeOf(["ULL", "RRDDD", "LURDL", "UUUUD"])).to.equal('5DB3');
        });

        it('day two input', () => {
            expect(decrypt.completeCodeOf(input)).to.equal('27CA4');
        });
    });
});